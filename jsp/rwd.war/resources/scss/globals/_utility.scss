// Globals folder is reserved for things like mixin declarations, functions & variables.
// Please do NOT use this folder for declaring Sass code that actually outputs CSS.

// Default Mixins to use at will!

// Take a px and convert to rem
@function calculateRem($values) {

	@if $supports-rem {
		$max: length($values);

		@if $max == 1 { @return convert-to-rem(nth($values, 1)); }

		$remValues: ();
		@for $i from 1 through $max {
			$remValues: append($remValues, convert-to-rem(nth($values, $i)));
		}
		@return $remValues;
	}
	@else {
		@return $values; //just use value we were provided
	}

}
@function convert-to-rem($size)  {
	$remSize: $size / $rem-base;
	@return $remSize * 1rem;
}

@mixin font-size($size) {
	font-size: calculateRem($size);
}

@mixin rem-size($attribute, $sizes) {
	#{$attribute}: calculateRem($sizes);
}

// Set all transitions across browsers
@mixin transition($property: all, $duration: .4s, $easing: ease-in-out) {
	-webkit-transition: $property, $duration, $easing;
	-moz-transition: $property, $duration, $easing;
	-ms-transition: $property, $duration, $easing;
	-o-transition: $property, $duration, $easing;
	transition: $property, $duration, $easing;
}

// Set drop shadows on elements
@mixin box-shadow($top, $left, $blur, $color, $inset: false, $spread: 0) {
	@if $inset {
		-webkit-box-shadow:inset $top $left $blur $spread $color;
		-o-box-shadow:inset $top $left $blur $spread $color;
		-moz-box-shadow:inset $top $left $blur $spread $color;
		box-shadow:inset $top $left $blur $spread $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $spread $color;
		-o-box-shadow: $top $left $blur $spread $color;
		-moz-box-shadow: $top $left $blur $spread $color;
		box-shadow: $top $left $blur $spread $color;
	}
}
@mixin box-shadow-none() {
	-moz-box-shadow: none;
	-o-box-shadow: none;
	-webkit-box-shadow: none;
	box-shadow: none;
}

// Sets rounded corners on elements
@mixin rounded($radius: 0.3em) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
}

// Sets shadows on text if desired
@mixin text-shadow($top: 0, $left: 1px, $blur: 1px, $color: rgba(0,0,0,.3)) {
	text-shadow: $top $left $blur $color;
}

//cross browser opacity
@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie); //IE8
}

// sets borders on elements
@mixin border($position, $height: 3px, $style: solid, $color: $border-color) {
    @if $position {
    border-#{$position}: $height $style $color;
   } @else {
     border: $height $style $color;
   }
}

// linear gradient
@mixin linearGradient($top, $bottom){
    background: $top; /* Old browsers */
    background: -moz-linear-gradient(top,  $top 0%, $bottom 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  $top 0%,$bottom 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  $top 0%,$bottom 100%); /* IE10+ */
    background: linear-gradient(to bottom,  $top 0%,$bottom 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 ); /* IE6-9 */
}

@mixin clearfix {
	&:before, &:after { content: " "; display: table; }
	&:after { clear: both; }
}

//Add box-sizing across browser prefixes
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type; // Android < 2.3, iOS < 4
	-moz-box-sizing: $type; // Firefox < 29
	box-sizing: $type; // Chrome, IE 8+, Opera, Safari 5.1
}

@mixin unlist {
	margin:0;
	padding:0;
	list-style: none;
}

//keeps the page from selecting text on doubleclick actions
@mixin no-select {
	-webkit-user-select: none; /* webkit (safari, chrome) browsers */
	-moz-user-select: none; /* mozilla browsers */
	-ms-user-select: none; /* IE10+ */
	user-select: none;
}

// Visible and focuasable on screen readers
@mixin sr-only {
	border: 0 none;
	clip: rect(0px, 0px, 0px, 0px);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}
@mixin sr-only-focusable {
	&:active, &:focus{
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto;
	}
}

@mixin constrain-width {
	max-width: $row-width;
	margin:0 auto;
}

// style placeholder (just send in content rules you want to style)
// @include placeholder{font-style:italic; color:#ccc; font-weight:300;}
@mixin placeholder {
	::-webkit-input-placeholder {@content}
	:-moz-placeholder           {@content}
	::-moz-placeholder          {@content}
	:-ms-input-placeholder      {@content}
}


@function getMediaQuery($query) {
	$mediaQueries: (
			"xsmall-only": $xsmall-only,
			"xsmall-up": $xsmall-up,
			"small-up": $screen,
			"small-only": $small-only,
			"medium-up": $medium-up,
			"medium-only": $medium-only,
			"large-up": $large-up,
			"large-only": $large-only
	);
	@return map-get( $mediaQueries, $query );
}

@mixin media($size) {
	// If media queries are supported
	@if $supports-mq {
		$query: getMediaQuery($size);
		@media #{$query} {
			@content;
		}
	}
	@else {
		// check if we should apply these rules...
		@if $size == "small-up" or $size == "medium-up" or $size == "large-up" or $size == "large-only" {
			// ...output the content the user gave us.
			@content;
		}
	}
}

// RANGES
// We use these functions to define ranges for various things, like media queries.
@function lower-bound($range){
	@if length($range) <= 0 {
		@return 0;
	}
	@return nth($range,1);
}

@function upper-bound($range) {
	@if length($range) < 2 {
		@return 999999999999;
	}
	@return nth($range, 2);
}

// Helper to align inline icons to midline of text
@mixin align-icon-middle($margin-top:-3px) {
	display:inline-block;
	vertical-align:middle;
	@include rem-size(margin-top, $margin-top);
}
