/* =========================================================
 /* =========================================================
 * lzb.filters.js
 * Created by DMI UX Team
 * ==========================================================
 * Accordion-structured sidebar feature that allows users to
 * refine items displayed on a department or category with
 * predermined filter rules.
 * Also handles applied facet UX (any filters currently applied
 * on the page).
 * NOTE: because the links on the filters and the breadcrumbs
 * are generated by Endeca, we are using the response from the
 * backend to update the interface.
 * ========================================================= */

(function (global, $, namespace) {
	"use strict";

	var CONSTANTS = global[namespace].constants,
		loggingDebug = global[namespace] && global[namespace].config && global[namespace].config.loggingDebug,
		options = {
			applied_filter_container: '.applied-facets',
			product_grid_container : '.category-product-grid',
			pagination_container : '.pagination-container',
			sort_container : '.sort-menu',
			filter_container : '.filters',
			clear_all_link : '.clear-all-link',
			num_results : '.product-results-count .result-count',
			breadcrumbs_container : '.breadcrumbs',
			main_hero_banner_container : '.main-hero-banner',
			show_more_threshold : 10
		},
	  // dependencies
		addURLParameter = global[namespace].utilities.addURLParameter,
		showLoader = function() {
			global[namespace].loader.showLoader();
		},
		hideLoader = function(){
			global[namespace].loader.hideLoader();
		};

	/* Filter Menu Object */
	function FilterMenu(element) {
		this.$element = $(element);
		this.init();
	}
	FilterMenu.prototype =  {
		init: function () {

			// this.initializeShowMore();

			/* EVENT LISTENERS */
			/* click event for the facet clicks facet menu */
			this.$element.on('click', '.facet', function(e) {
				// if facet is a link (categories) don't do all this
				if (!$(this).parents('.facet-list').hasClass('links')) {

					/* clicking on a label triggers a second click on the checkbox. We only want to handle one click */
					/* compare e.nodeName to this to see if bubbling is taking place*/
					if (e.target.nodeName == 'LABEL') {
						e.stopPropagation();
						return;
					}

					// add class on click event for checkboxes
					$('input:checkbox').change(function(){
						if ($(this).is(':checked')) {
							$(this).parents('.facet').addClass('active');
						}
						else {
							$(this).parents('.facet').removeClass('active');
						}
					});

					var $facet = $(this),
						getid = $facet.attr('data-id'),
						// nstate is for endeca database requests
						facetnstate = $facet.attr('data-nstate');

					if (!$facet.hasClass('active')) {
						// add highlighting to facet
						$facet.addClass('active');
					}
					else {
						// turn off active facet state
						$facet.removeClass('active');
						// remove applied facet item from bar
						$('.applied-facet[data-id="' + getid + '"]').remove();
					}

					//Ajax request to display the refined results.
					window.location.hash = '#' + facetnstate;

					// scroll to top of page.
					$('html, body').animate({scrollTop: 0}, 400);
				}
			})
			/* click event for the clear link within the facet menu. NOT currently used as we only have a single .clear-all-link */
			.on('click', '.clear-filter', function(e){
				var common = [],
						clearAllURL = '',
						$clearAll = $(this),
						queryString='',
						contextPath='';

				$clearAll.siblings('.facet.active').each(function(ind){
					var removeNstate = this.getAttribute('data-nstate'),
							index;
					//if the clear all link does not have N value, return the removeNstate
					if (($('#keywordSearchTerm').val() !== undefined) && (removeNstate.indexOf('Ntt') !== -1) && (removeNstate.indexOf('N-') === -1)){
						clearAllURL = removeNstate;
						return false;
					}
					/* the url could have a query string, or could be an endeca url (ex /store/browse/shoes-casual-shoes/_/N-10504) */
					if(queryString === '' && removeNstate.indexOf('?') != -1){
						queryString = removeNstate.substring(removeNstate.indexOf('?'), removeNstate.length);
					}
					if(contextPath === '' && (removeNstate.indexOf('N-') != -1 || removeNstate.indexOf('?'))){
						if(removeNstate.indexOf('N-') != -1 ){
							contextPath = removeNstate.substring(0,removeNstate.indexOf('N-'));
						}
						else {
							contextPath = removeNstate.substring(0,removeNstate.indexOf('?'));
						}
					}
					var startI = removeNstate.indexOf('N-') + 2;
					var endI = removeNstate.indexOf('?')!= -1  ? removeNstate.indexOf('?') : removeNstate.length;
					index = removeNstate.substring(startI, endI).split('+');

					if(common.length === 0){
						common = index;
					}
					else {
						common = $.grep(common, function(element) {
							return $.inArray(element, index ) !== -1;
						});
					}
				});

				// remove all active states from respective category's filters incl checkboxes
				$clearAll.parent().find('div').removeClass('active');
				$clearAll.parent().find('input[type=checkbox]').removeClass('active').removeAttr('checked');

				//building the clear-all url using context path, N values, queryStrings from above loop
				if ($('#keywordSearchTerm').val() !== undefined ) {
					if (common.length !== 0) {
						clearAllURL = contextPath + 'N-' + common.join('+') + queryString;
					}
				}
				else {
					clearAllURL = contextPath + 'N-' + common.join('+') + queryString;
				}

				// hide clear-all button
				$clearAll.removeClass('enabled').slideUp();
				window.location.hash = '#' + clearAllURL;
			})
			/* clicks on the show more link within the facet list should show all the hidden facets, then remove the link */
			.on('click', '.facet-show-more', function(e) {
				var $showMore = $(this),
					type = $showMore.attr('data-type');
				e.preventDefault();
				$showMore.siblings(':hidden').show().end()
						.closest('.facet-list').addClass('full-list').end();

				if (type=="more") {
					$showMore.attr("data-type","less");
					$showMore.html("Show Less");
				}
				else {
					$showMore.closest('.facet-list').find('.facet:gt(' + options.show_more_threshold + ')').hide();
					$showMore.attr("data-type","more");
					$showMore.html("Show More");
				}
			});
			/* Mobile facet menu, cancel or apply button (facets are already applied) */
			$('.close-facets, .apply-facets').click(function(e) {
				var $offCanvasWrap = $('.off-canvas-wrap');
				if ($offCanvasWrap.hasClass('side-facets-overlap') || $offCanvasWrap.hasClass('side-sort-overlap')) {
					$('.close-off-canvas-link').trigger('click');
					$('html').removeClass('no-scroll');
				}
			});

			if(typeof $('.applied-facet') === 'object' && $('.applied-facet') !== undefined && $('.applied-facet').length > 0){
				this.$element.find('.facet-list').each(function(){
					var $self = $(this);
					if ($self.attr('data-dim') === undefined || $(this).attr('data-dim') === 'category' ) {
						return;
					}
					$('.applied-facet').each(function(){
						var $appliedFacet = $(this);
						if ($self.attr('data-dim') == $appliedFacet.attr('data-dim')){
							var appliedFacetResult = $appliedFacet.find('.applied-facet-'+$appliedFacet.attr('data-dim'));
							$self.find('.facet').first().before(appliedFacetResult);
						}
					});
				});
			}
		},
		/* When we initialize, hide the extra items in the facet list. They can be shown by clicking a show more button */
		initializeShowMore: function($lists){
			var self = this;
			$lists = $lists || this.$element.find('.facet-list:not([data-dim="category"])');
			$lists.each(function(index, element){
				var $list;
				/* user has clicked the show more for this facet list. Honor it and don't re-collapse */
				if (/full-list/.test(element.getAttribute("class"))){
					return;
				}
				$list = $(element);
				if ($list.find('.facet').length > options.show_more_threshold + 1) {
					$list.find('.facet:gt(' + options.show_more_threshold + ')').hide();
					if ($.find('.facet-show-more', element).length === 0) {
						$list.append('<a href="#" class="facet-show-more" data-type="more" rel="nofollow">Show More</a>');
					}
				}
			});
		},
		applyFacets: function(response){
			//If the facets were not clicked, this iteration will mark them as clicked
			$(response).find('.applied-facet').each(function(){
				var $responseAppliedFacet = $(this),
					facetidRes = $responseAppliedFacet.attr('data-id'),
					$facetMatch = $('.facet[data-id="' + facetidRes + '"]');

				if (!$facetMatch.hasClass('active')) {
					// add active class
					$($facetMatch).addClass('active');

					// check the checkbox
					$facetMatch.find('[type="checkbox"]').prop('checked', true);
				}
			});
		},
		mergeRefinements: function(response) {
			var self = this,
				$response = $(response);

			//compare existing DOM with ajax response and merge. Disables irrelevant refinements
			$response.find('.facet-list').each(function(){
				var $responseRefinementMenu = $(this);

				$('.facet-list').each(function(){
					if ($responseRefinementMenu.attr('data-dim') === undefined || $(this).attr('data-dim') === 'category' ) {
						return;
					}
					/* cloning to manipulate dom off canvas before inserting updated content */
					var $originalRefinementMenu = $(this),
						$originalRefinementMenuClone = $originalRefinementMenu.clone();

					//Iterate only if the facet type is the same
					if ($originalRefinementMenuClone.attr('data-dim') == $responseRefinementMenu.attr('data-dim')){
						$($responseRefinementMenu).find('.facet').each(function(index){
							var $responseFacet = $(this),
								isNewFacet = true;

							$($originalRefinementMenuClone).find('.facet').each(function(index){
								var $originalFacet = $(this);

								if ($originalFacet.attr('data-id') == $responseFacet.attr('data-id')){
									$originalFacet.replaceWith($responseFacet);
									//Marking all visited refinement links
									$responseFacet.attr('data-visited','y');
									isNewFacet = false;
								}
							});

							// Commenting out incase this functionality is desired in the future.
							// If the domFacet was not assigned to any of the existing DOM, the responseFacet is new - hence append.
							/*
							if (isNewFacet) {
								$originalRefinementMenuClone.find('.facet').last().after($responseFacet);
								$responseFacet.attr('data-visited','y');
							}
							*/
						});

						/* Hide any extra items */
						// self.initializeShowMore($originalRefinementMenuClone);

						/* insert updated content */
						$originalRefinementMenu.replaceWith($originalRefinementMenuClone);
					}
				});
			});


			/*
			 * Loop through the facets, check for facets not visited in previous loop through the response facets - disable
			 * them as they are not present in the ajax response - hence not valid anymore. For all the active facets, update
			 * the attributes in the applied facets bar.
			 */
			$('.facet').each(function(index){
				var $originalFacet = $(this),
					$appliedFacet;

				if($originalFacet.parent('div').attr('data-dim') === 'category'){
					return;
				}
				if (!$originalFacet.hasClass('active')){
					if ($originalFacet.attr('data-visited') != 'y') {
						// making unavailable doesn't work properly with the data heirarchy we have. let's just remove it instead
						$originalFacet.addClass('unavailable');
						$originalFacet.find('.swatch').removeAttr('tabindex');
						if ($originalFacet.find('[type="checkbox"]')) {
							$originalFacet.find('[type="checkbox"]').prop('disabled', true);
						}
					} else {
						/* removing flag for next iteration */
						$originalFacet.removeAttr('data-visited');
					}
				}
				else {
					$appliedFacet = $(options.applied_filter_container).find('[data-id="' + $originalFacet.attr('data-id') + '"]');
					if ($appliedFacet.length > 0) {
						$originalFacet.attr('data-nstate', $appliedFacet.attr('data-nstate'));

						// only update the ref-count if it returns a value.
						if (typeof $appliedFacet.attr('data-count') != "undefined") {
							$originalFacet.find(".ref-count").html(' ('+$appliedFacet.attr('data-count')+')');
						}
						else {
							// clear the ref-count when it is undefined due to this facet being applied.
							$originalFacet.find(".ref-count").html('');
						}

						if($originalFacet.find('.swatch').length > 0) {
							$originalFacet.find(".icon-check").css('display', 'inline-block');
						}
					}
				}
			});
		},
		update: function(response) {
			if(response !== null) {
				// Refresh left nav after merge
				this.applyFacets(response);
				this.mergeRefinements(response);
			}
			// loop through each accordion in the filters menu so we can set the selected filter summary label in the .accordion-title
			this.$element.find('.accordion-container').each(function() {
				var $accordionContainer = $(this),
					$selectedFacetsSummary = $accordionContainer.find('.selected-facets'),
					selectedFacetsArr = [];

				// loop through each facet
				$accordionContainer.find('.facet').each(function() {
					var $facet = $(this);
					// find the any selected facets
					if ($facet.hasClass('active')) {
						var trimedFacet = $.trim($facet.find('label').text());
						/* build selected facet array */
						selectedFacetsArr.push(trimedFacet);
					}
				});

				// add style class to facet title
				if (selectedFacetsArr.length > 0) {
					$accordionContainer.find('.facet-title').addClass('selected');
				}

				/* insert selected facet summary content */
				var selectedFacets = global[namespace].utilities.truncateWithEllipses(selectedFacetsArr.join(', '), 40);
				$selectedFacetsSummary.html(selectedFacets);
			});
		}
	};

	/* Sort Menu Object */
	function SortMenu(element) {
		this.$element = $(element);
		this.buttonTemplate = '{{selectedSortText}}';
		this.init();
	}
	SortMenu.prototype = {
		init : function () {
			//Sort options - defined here because the facets should know about the sort user selected
			this.$element.on('click','.sort-item', function(e) {
				e.preventDefault();

				// if user clicks on already selected item, we don't need to do anything.
				if (/active/.test(this.getAttribute("class"))) {
					return;
				}

				var selectedSortValue = $(this).attr('data-sortvalue');
				window.location.hash = '#' + selectedSortValue;
			});
		},
		update : function(response) {
			// update the sort menu contents.
			this.$element.find('.sort-list').html($(response).find(options.sort_container + ' .sort-list').html());

            //update clear all link.
			$(options.clear_all_link).attr('href',$(response).find(options.clear_all_link).attr('href'));
		}
	};

	/* Product Grid Object */
	function ProductGrid(element) {
		this.$element = $(element);
		this.init();
	}
	ProductGrid.prototype = {
		init : function () {},
		update: function(response) {
			/* Update grid contents */
			this.$element.html($(response).find(options.product_grid_container).html());
			/* initialize responsive images */
			global.picturefill();

			/* there are no results, show null results message */
			var emptyResultsMessage = $(response).find('#null-filters-message').html();
			if(emptyResultsMessage !== ''){
				$('#null-filters-message').html(emptyResultsMessage).show();
			} else {
				$('#null-filters-message').empty().hide();
			}
		}
	};

	/* Applied Filters Object */
	function AppliedFilters(element) {
		this.$element = $(element);
		this.init();
	}
	AppliedFilters.prototype = {
		init : function () { 
			// ajax request to display the refined results.
			this.$element.on('click', '.applied-facet-item', function(e) {
				e.preventDefault();

				window.location.hash = '#' + $(this).parents('.applied-facet').attr('data-nstate');
			});
		},
		update: function(response) {
			// update the applied facets
			this.$element.find('.accordion-body-content').html($(response).find(options.applied_filter_container + ' .accordion-body-content').html());

			var numOfTotalAppliedFacets = $(options.applied_filter_container + ' .applied-facet').length;
			
			if (numOfTotalAppliedFacets === 0) {
				// if nothing is found hide the applied facets
				$(options.applied_filter_container).hide();
				// clear the total number of applied facets
				$('#applied-facet-title').find('.ref-count').html('');
			}
			else {
				// update total number of applied facets
				$('#applied-facet-title').find('.ref-count').html('(' + numOfTotalAppliedFacets + ')');
				// if something is found show the applied facets
				$(options.applied_filter_container).show();
			}
		}
	};

	/* Pagination Object */
	function Pagination(element) {
		this.$element = $(element);
		this.init();
	}
	Pagination.prototype = {
		init : function(){
			// pagination ajax
			this.$element.on('click', '.pagination a', function(e) {
				e.preventDefault();
				var $selector = $(this),
					paginationURL = '';

					if ($selector.hasClass('more-pages') || $selector.hasClass('disabled')) {
						return;
					}
					else {
						paginationURL = $selector.attr('href');
					}
					window.location.hash = '#'+paginationURL;
					showLoader();

					$.ajax(paginationURL, {
						success: function(data) {
							hideLoader();
							$('.pagination').html($(data).find('.pagination').html());
							/* load responsive images */
							global.picturefill();
							$('html, body').animate({scrollTop: 0}, 400);
						},
						error: function() {
							hideLoader();
						}
					});
			});
		},
		update: function(response) {
			this.$element.html($(response).find(options.pagination_container).html());
		}
	};

	/* Number of Results Object*/
	function NumberOfResults(element) {
		this.$element = $(element);
		// this.init();
	}
	NumberOfResults.prototype = {
		// init : function(){},
		update: function(response) {
			// update the total number of search results
			this.$element.html($(response).find('.category-navigation-container ' + options.num_results).html());
		}
	};

	/* Breadcrumbs Object*/
	function Breadcrumbs(element) {
		this.$element = $(element);
		// this.init();
	}
	Breadcrumbs.prototype = {
		// init : function(){},
		update: function(response) {
			// update the breadcrumbs
			this.$element.html($(response).filter(options.breadcrumbs_container).html());
		}
	};

	/* Main Hero Banner Object*/
	function MainHeroBanner(element) {
		this.$element = $(element);
		// this.init();
	}
	MainHeroBanner.prototype = {
		// init : function(){},
		update: function(response) {
			// update the main hero banner
			this.$element.html($(response).find(options.main_hero_banner_container).html());
		}
	};

	/* the Controller */
	function FilterController(){
		this.init();
	}
	FilterController.prototype = {
		init: function() {
			if (loggingDebug) {
				console.debug('init filter controller');
			}

			var self = this;
			this.appliedFilters = new AppliedFilters(options.applied_filter_container);
			this.productGrid = new ProductGrid(options.product_grid_container);
			this.pagination = new Pagination(options.pagination_container);
			this.sortMenu = new SortMenu(options.sort_container);
			this.filterMenu = new FilterMenu(options.filter_container);
			this.numResults = new NumberOfResults(options.num_results);
			this.breadcrumbs = new Breadcrumbs(options.breadcrumbs_container);
			this.mainHeroBanner = new MainHeroBanner(options.main_hero_banner_container);

			/* Handle hash change */
			$(window).on('hashchange', function(e) {
				if (window.location.hash.indexOf('#') != -1){
					var hashUrl = window.location.hash.substring(1),
						pathname = window.location.pathname;

					if (hashUrl == pathname) {
						// reload page without hash to ensure back button is not an ajax request
						window.location = pathname;
					}
					else {
						self.makeEndecaRequest(hashUrl);
					}
				}
				else {
					//non hash url handle
					self.makeEndecaRequest(e.originalEvent.newURL);
				}
			});

			/* Fire the ajax request if the url has hash in it */
			$(window).on('load', function(e) {
				if(window.location.hash !== '' && (window.location.hash.indexOf('#') != -1)){
					$(window).trigger('hashchange');
				}
				self.addAppliedFacets();
				self.removeFacet('onSale', 'Regular');
				self.filterMenu.update(null);
			});

		},
		addAppliedFacets: function(){
			var appliedFacets = $('.applied-facet');
			$(appliedFacets).each(function(){
				var $facetHTML,
					facetKey = this.dataset.id.substr(0, this.dataset.id.indexOf('-')),
					facetData = {
						facetURL: this.dataset.nstate,
						facetID: this.dataset.id,
						facetCat: facetKey,
						labelText: this.dataset.id.substr(this.dataset.id.indexOf('-')+1).replace('-', ' ' ),
						facetCount: this.dataset.count
					};
					if($('#' + this.dataset.id).length == 0 && facetKey == 'onSale') {
						$facetHTML = $(Mustache.render(global[namespace].templates.facetItemTemplate, facetData));
						$facetHTML.find('#' + this.dataset.id).prop('checked', true);
						$facetHTML.addClass('active');
						$('[data-dim="' + facetKey + '"]').prepend($facetHTML);
						$(options.applied_filter_container).show();
					}
			});
		},

		removeFacet: function (filterID, facetID) {
			/* find filter */
			var $filterList =$('[data-dim="'+ filterID +'"]');
			/* remove facet */
			$filterList.find('.facet[data-id="'+ filterID + '-' + facetID + '"]').remove();
			/* Remove filter if empty */
			if ($filterList.children().length === 0) {
				$filterList.closest('.accordion-container').remove();
			}
		},
		makeEndecaRequest : function(url){
			var self = this;
			showLoader();
			$.ajax(url, {
				cache: false,
				success: function(data) {
					hideLoader();
					self.updatePageWishResults(data);
				},
				error: function() {
					hideLoader();
				}
			});
		},
		updatePageWishResults: function(data) {
			//Refresh product grid, sort options, pagination, breadcrumbs with ajax response
			this.pagination.update(data);
			this.sortMenu.update(data);
			this.productGrid.update(data);
			this.appliedFilters.update(data);
			this.filterMenu.update(data);
			this.numResults.update(data);
			this.breadcrumbs.update(data);
			this.mainHeroBanner.update(data);
		}
	};

	if (!global[namespace]) {
		global[namespace] = {};
	}
	global[namespace].FilterController = FilterController;

}(this, window.jQuery, "LZB"));
